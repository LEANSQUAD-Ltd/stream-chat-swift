(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{106:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return o})),t.d(n,"toc",(function(){return s})),t.d(n,"default",(function(){return h}));var a=t(3),l=t(7),r=(t(0),t(124)),i={title:"Working with Channel List"},o={unversionedId:"guides/working-with-channel-list",id:"guides/working-with-channel-list",isDocsHomePage:!1,title:"Working with Channel List",description:"Understanding ChannelListQuery",source:"@site/docs/guides/working-with-channel-list.md",slug:"/guides/working-with-channel-list",permalink:"/stream-chat-swift/guides/working-with-channel-list",editUrl:"https://github.com/GetStream/stream-chat-swift/edit/main/stream-chat-swift-docs/docs/guides/working-with-channel-list.md",version:"current",sidebar:"docs",previous:{title:"Getting Started",permalink:"/stream-chat-swift/guides/getting-started"},next:{title:"Working with a Channel",permalink:"/stream-chat-swift/guides/working-with-a-channel"}},s=[{value:"Understanding <code>ChannelListQuery</code>",id:"understanding-channellistquery",children:[{value:"Filter",id:"filter",children:[]},{value:"Sorting",id:"sorting",children:[]},{value:"PageSize",id:"pagesize",children:[]},{value:"Message Limit",id:"message-limit",children:[]}]},{value:"Displaying the list of Channels",id:"displaying-the-list-of-channels",children:[]},{value:"Getting the list of Channels for a User",id:"getting-the-list-of-channels-for-a-user",children:[{value:"Importance of <code>synchronize</code>",id:"importance-of-synchronize",children:[]},{value:"Observing changes to Channel List",id:"observing-changes-to-channel-list",children:[]}]},{value:"Paginating Channel List",id:"paginating-channel-list",children:[]},{value:"Marking all Channels as Read",id:"marking-all-channels-as-read",children:[]}],c={toc:s};function h(e){var n=e.components,t=Object(l.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"understanding-channellistquery"},"Understanding ",Object(r.b)("inlineCode",{parentName:"h2"},"ChannelListQuery")),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"ChannelListQuery")," is the structure used for specifiying the query parameters for fetching the list of channels from Stream backend.\nIt has 4 parameters in it's ",Object(r.b)("inlineCode",{parentName:"p"},"init"),":"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-swift"},"public init(\n        filter: Filter<_ChannelListFilterScope<ExtraData>>,\n        sort: [Sorting<ChannelListSortingKey>] = [],\n        pageSize: Int = .channelsPageSize,\n        messagesLimit: Int = .messagesPageSize\n)\n")),Object(r.b)("p",null,"Let's dive deep into each one."),Object(r.b)("h3",{id:"filter"},"Filter"),Object(r.b)("p",null,"Filter is the main parameter for a query. You can define different filters to fetch different sets of channels for a user.\nExamples of some most commonly used filters:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-swift"},'// Assume we\'ve already created and configured our ChatClient\n\n// Filter for channels where our user is a member\nlet filter = Filter<ChannelListFilterScope>.containMembers(userIds: [client.currentUserId!])\n\n// Filter for channels where the name starts with "Group"\nlet filter = Filter<ChannelListFilterScope>.autocomplete(.name, text: "Group")\n\n// Compound Filter for channels where team is read and our user is a member\nlet filter = Filter<ChannelListFilterScope>.and([.equal(.team, to: "read"),\n                                                 .containMembers(userIds: [client.currentUserId!])])\n')),Object(r.b)("p",null,"For more information about ",Object(r.b)("inlineCode",{parentName:"p"},"team"),", please refer to our ",Object(r.b)("a",{parentName:"p",href:"multi-tenancy"},"Multi-Tenancy Guide"),"."),Object(r.b)("p",null,"For more information about filters, please refer to our ",Object(r.b)("a",{parentName:"p",href:"filter-query-guide"},"Filter & Query Guide"),"."),Object(r.b)("h3",{id:"sorting"},"Sorting"),Object(r.b)("p",null,"Sorting parameter is used to sort the list of channels returned. By default, Channel List will be sorted by their last message date (or channel creation date, if the channel is empty).\nMost commonly, you don't need to specify any sorting, StreamChat SDK handles this. If you'd like, you can create custom sortings, such as:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-swift"},"// Sorting for always showing most crowded channels first\nlet sorting: [Sorting<ChannelListSortingKey>] = [.init(key: .memberCount, isAscending: true),\n                                                 .init(key: .lastMessageAt, isAscending: true)]\n")),Object(r.b)("h3",{id:"pagesize"},"PageSize"),Object(r.b)("p",null,"Page size is used to specify how many channels the initial page will show. You can specify an integer value for advanced usecases. Most commonly, you don't need to touch this."),Object(r.b)("h3",{id:"message-limit"},"Message Limit"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"messagesLimit")," is used to specify how many messages the initial fetch will return."),Object(r.b)("h2",{id:"displaying-the-list-of-channels"},"Displaying the list of Channels"),Object(r.b)("p",null,"Displaying the list of channels consists of creating the controller for the list you want to display, passing this controller to a ",Object(r.b)("inlineCode",{parentName:"p"},"ChatChannelListVC")," instance, and displaying the view controller. To demonstrate:"),Object(r.b)("img",{align:"right",src:"../img/channel-list.png",width:"20%"}),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-swift"},"// Create the query for the channel list we desire\nlet query = ChannelListQuery(filter: .containMembers(userIds: [client.currentUserId!]))\n// Create the ChannelListController for the query\nlet controller = chatClient.channelListController(query: query)\n// Create the ChatChannelListVC instance\nlet channelListVC = ChatChannelListVC()\n// Pass the controller to the VC\nchannelListVC.controller = controller\n// Display the VC\npresent(channelListVC, animated: true)\n")),Object(r.b)("p",null,"It's that easy. ",Object(r.b)("inlineCode",{parentName:"p"},"ChatChannelListVC")," internally handles all parameters, sorting, pagination and updating the list in itself. The rest of this guide will explain how to work with controller, for a guide on ",Object(r.b)("inlineCode",{parentName:"p"},"ChatChannelListVC"),", please refer to ",Object(r.b)("a",{parentName:"p",href:"404"},"ChatChannelListVC Component Overview")),Object(r.b)("h2",{id:"getting-the-list-of-channels-for-a-user"},"Getting the list of Channels for a User"),Object(r.b)("p",null,"If you'd like to have your own UI component, for access the list of channels for any other purpose, you can do so as shown here:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-swift"},"// Create the query for the channel list we desire\nlet query = ChannelListQuery(filter: .containMembers(userIds: [client.currentUserId!]))\n// Create the ChannelListController for the query\nlet controller = chatClient.channelListController(query: query)\n// Access `channels` property directly\nlet firstChannel = controller.channels[0]\nprint(firstChannel.name)\n")),Object(r.b)("p",null,"Accessing the ",Object(r.b)("inlineCode",{parentName:"p"},"channels")," property of a controller starts the initial database fetch automatically, and will return whatever data you have locally cached."),Object(r.b)("h3",{id:"importance-of-synchronize"},"Importance of ",Object(r.b)("inlineCode",{parentName:"h3"},"synchronize")),Object(r.b)("p",null,"As stated above, plainly accessing ",Object(r.b)("inlineCode",{parentName:"p"},"channels")," property will only make locally available data visible. If your client is not up-to-date with backend, or it never cached any data, you need to call ",Object(r.b)("inlineCode",{parentName:"p"},"synchronize")," to make local client sync with backend.\nAfter you call ",Object(r.b)("inlineCode",{parentName:"p"},"synchronize"),", your ",Object(r.b)("inlineCode",{parentName:"p"},"channels")," property will be updated and you'll have the latest channels."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-swift"},'// Create the query for the channel list we desire\nlet query = ChannelListQuery(filter: .containMembers(userIds: [client.currentUserId!]))\n// Create the ChannelListController for the query\nlet controller = chatClient.channelListController(query: query)\n// Call synchronize on controller\ncontroller.synchronize { error in\n    // Controller reports error if any happened\n    if let error = error {\n        // Handle error here\n        print("Error happened during synchronize: \\(error)")\n        return\n    }\n    // At this point, you\'re safe to access newly fetched channels\n    // Access `channels` property directly\n    let firstChannel = controller.channels[0]\n    print(firstChannel.name)\n}\n')),Object(r.b)("h3",{id:"observing-changes-to-channel-list"},"Observing changes to Channel List"),Object(r.b)("p",null,"Accessing ",Object(r.b)("inlineCode",{parentName:"p"},"channels")," property of the controller is not ideal, so in many cases you'd require a way to observe changes to this property. There are 3 most common ways of doing so: UIKit Delegates, Combine publishers and SwiftUI wrappers."),Object(r.b)("h4",{id:"uikit-delegates"},"UIKit Delegates"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"ChatChannelListController")," has ",Object(r.b)("inlineCode",{parentName:"p"},"ChatChannelListControllerDelegate")," with ",Object(r.b)("inlineCode",{parentName:"p"},"didChangeChannels")," function:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-swift"},"func controller(\n        _ controller: ChatChannelListController,\n        didChangeChannels changes: [ListChange<ChatChannel>]\n    )\n")),Object(r.b)("p",null,"Whenever the ",Object(r.b)("inlineCode",{parentName:"p"},"channels")," property of the controller changes, this delegate function will be called. So, our example above becomes:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-swift"},"class ChannelListViewController: UIViewController {\n\n    let channelListController = chatClient.channelListController(\n       query: ChannelListQuery(filter: .containMembers(userIds: [chatClient.currentUserId]))\n    )\n\n    override func viewDidLoad() {\n       super.viewDidLoad()\n       channelListController.delegate = self\n\n       // update your UI with the cached channels first, for example by calling reloadData() on UITableView\n       let locallyAvailableChannels = channelListController.channels\n\n       // call `synchronize()` to update the locally cached data. the updates will be delivered using delegate methods\n       channelListController.synchronize()\n    }\n}\n\nextension ChannelListViewController: ChatChannelListControllerDelegate { \n    func controller(_ controller: ChatChannelListController, didChangeChannels changes: [ListChange<Channel>]) {\n        // The list of channels has changed. You can for example animate the changes:\n\n        tableView.beginUpdates()        \n        for change in changes {\n            switch change {\n            case let .insert(_, index: index):\n                tableView.insertRows(at: [index], with: .automatic)\n            // etc ...\n            }\n        }        \n        tableView.endUpdates()\n    }\n}\n")),Object(r.b)("p",null,"Additionally, as with all StreamChat Controllers, ",Object(r.b)("inlineCode",{parentName:"p"},"ChannelListController")," has ",Object(r.b)("inlineCode",{parentName:"p"},"state")," and a delegate function to observe it's ",Object(r.b)("inlineCode",{parentName:"p"},"state"),":"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-swift"},"func controller(_ controller: DataController, didChangeState state: DataController.State) \n")),Object(r.b)("p",null,"You can use this delegate function to show any error states you might see. For more information, see ",Object(r.b)("a",{parentName:"p",href:"404"},"DataController Overview"),"."),Object(r.b)("h4",{id:"combine-publishers"},"Combine publishers"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"ChannelListController")," has publishers for its ",Object(r.b)("inlineCode",{parentName:"p"},"channels")," property so it's observable, like so:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-swift"},"class ChannelsViewController: UIViewController {\n\n    let channelListController = chatClient.channelListController(\n       query: ChannelListQuery(filter: .containMembers(userIds: [chatClient.currentUserId]))\n    )\n\n    private var cancellables: Set<AnyCancellable> = []\n\n    override func viewDidLoad() {\n       super.viewDidLoad()\n\n       // update your UI with the cached channels first, for example by calling reloadData() on UITableView\n       let locallyAvailableChannels = channelListController.channels\n\n       // Observe changes to the list from the publishers\n        channelListController\n             .channelsChangesPublisher\n             .receive(on: RunLoop.main)\n             .sink { [weak self] changes in\n                // animate the changes to the channel list\n             }\n             .store(in: &cancellables)\n\n       // call `synchronize()` to update the locally cached data. the updates will be delivered using channelsChangesPublisher\n       channelListController.synchronize()\n    }\n}\n")),Object(r.b)("h4",{id:"swiftui-wrappers"},"SwiftUI Wrappers"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"ChannelListController")," is fully compatible with SwiftUI."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-swift"},'// View definition\n\nstruct ChannelListView: View {\n    @ObservedObject var channelList: ChatChannelListController.ObservableObject\n\n    init(channelListController: ChatChannelListController) {\n        self.channelList = channelListController.observableObject\n    }\n\n    var body: some View {\n        VStack {\n            List(channelList.channels, id: \\.self) { channel in\n                Text(channel.name)\n            }\n        }\n        .navigationBarTitle("Channels")\n        .onAppear { \n            // call `synchronize()` to update the locally cached data.\n            channelList.controller.synchronize() \n        }\n    }\n}\n\n// Usage\n\nlet channelListController = chatClient.channelListController(\n    query: ChannelListQuery(filter: .containMembers(userIds: [chatClient.currentUserId]))\n)\n\nlet view = ChannelListView(channelListController: channelListController)\n')),Object(r.b)("h2",{id:"paginating-channel-list"},"Paginating Channel List"),Object(r.b)("p",null,"When you scroll to the end of locally available data, you'll need to fetch the next page of channels from backend. Controller has the function ",Object(r.b)("inlineCode",{parentName:"p"},"loadNextChannels"),". Typically you do this when you reach the end of the list, like so:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-swift"},"override func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {\n    if indexPath.section == tableView.numberOfSections - 1,\n       indexPath.row == tableView.numberOfRows(inSection: indexPath.section) - 1 {\n        // We'll display the last channel soon, we need to load next page of channels\n        channelListController.loadNextChannels()\n    }\n}\n")),Object(r.b)("h2",{id:"marking-all-channels-as-read"},"Marking all Channels as Read"),Object(r.b)("p",null,"When you're displaying, or loading a set of channels, you may want to mark all the channels as read. For this, ",Object(r.b)("inlineCode",{parentName:"p"},"ChannelListController")," has ",Object(r.b)("inlineCode",{parentName:"p"},"markAllRead")," function:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-swift"},"controller.markAllRead()\n")),Object(r.b)("p",null,"This function will reset the unread count for all the channels the controller paginates."))}h.isMDXComponent=!0},124:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return b}));var a=t(0),l=t.n(a);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var c=l.a.createContext({}),h=function(e){var n=l.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=h(e.components);return l.a.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return l.a.createElement(l.a.Fragment,{},n)}},p=l.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=h(t),p=a,b=d["".concat(i,".").concat(p)]||d[p]||u[p]||r;return t?l.a.createElement(b,o(o({ref:n},c),{},{components:t})):l.a.createElement(b,o({ref:n},c))}));function b(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=p;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var c=2;c<r;c++)i[c]=t[c];return l.a.createElement.apply(null,i)}return l.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"}}]);