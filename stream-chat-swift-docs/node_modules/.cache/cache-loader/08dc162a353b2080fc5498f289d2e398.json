{"remainingRequest":"/Users/dmigach/Desktop/stream-chat-swift/stream-chat-swift-docs/node_modules/babel-loader/lib/index.js??ref--12-1!/Users/dmigach/Desktop/stream-chat-swift/stream-chat-swift-docs/node_modules/@docusaurus/mdx-loader/src/index.js??ref--12-2!/Users/dmigach/Desktop/stream-chat-swift/stream-chat-swift-docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--12-3!/Users/dmigach/Desktop/stream-chat-swift/stream-chat-swift-docs/docs/guides/working-with-messages.md","dependencies":[{"path":"/Users/dmigach/Desktop/stream-chat-swift/stream-chat-swift-docs/docs/guides/working-with-messages.md","mtime":1622479040881},{"path":"/Users/dmigach/Desktop/stream-chat-swift/stream-chat-swift-docs/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-guides-working-with-messages-md-449.json","mtime":1621878602953},{"path":"/Users/dmigach/Desktop/stream-chat-swift/stream-chat-swift-docs/node_modules/cache-loader/dist/cjs.js","mtime":1621247292444},{"path":"/Users/dmigach/Desktop/stream-chat-swift/stream-chat-swift-docs/node_modules/babel-loader/lib/index.js","mtime":1621247292381},{"path":"/Users/dmigach/Desktop/stream-chat-swift/stream-chat-swift-docs/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1621247302486},{"path":"/Users/dmigach/Desktop/stream-chat-swift/stream-chat-swift-docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1621247301494}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dmigach/Desktop/stream-chat-swift/stream-chat-swift-docs/docs/guides/working-with-messages.md"],"names":["React","mdx","frontMatter","title","metadata","toc","value","id","children","layoutProps","MDXLayout","MDXContent","components","props","isMDXComponent"],"mappings":"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","sourcesContent":["\n  import React from 'react';\n  import { mdx } from '@mdx-js/react';\n\n  export const frontMatter = {\n\ttitle: 'Working with Messages'\n};\nexport const metadata = {\n  \"unversionedId\": \"guides/working-with-messages\",\n  \"id\": \"guides/working-with-messages\",\n  \"isDocsHomePage\": false,\n  \"title\": \"Working with Messages\",\n  \"description\": \"Message object\",\n  \"source\": \"@site/docs/guides/working-with-messages.md\",\n  \"slug\": \"/guides/working-with-messages\",\n  \"permalink\": \"/stream-chat-swift/guides/working-with-messages\",\n  \"editUrl\": \"https://github.com/GetStream/stream-chat-swift/edit/main/stream-chat-swift-docs/docs/guides/working-with-messages.md\",\n  \"version\": \"current\",\n  \"sidebar\": \"docs\",\n  \"previous\": {\n    \"title\": \"Working with a Channel\",\n    \"permalink\": \"/stream-chat-swift/guides/working-with-a-channel\"\n  },\n  \"next\": {\n    \"title\": \"Working with User\",\n    \"permalink\": \"/stream-chat-swift/guides/working-with-user\"\n  }\n};\n  /* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const toc = [{\n  value: 'Message object',\n  id: 'message-object',\n  children: []\n}, {\n  value: 'Optimistic updates',\n  id: 'optimistic-updates',\n  children: []\n}, {\n  value: 'Get a Message by its ID',\n  id: 'get-a-message-by-its-id',\n  children: []\n}, {\n  value: 'Create a message',\n  id: 'create-a-message',\n  children: []\n}, {\n  value: 'How sending a message works',\n  id: 'how-sending-a-message-works',\n  children: []\n}, {\n  value: 'Edit a message',\n  id: 'edit-a-message',\n  children: []\n}, {\n  value: 'Delete a message',\n  id: 'delete-a-message',\n  children: []\n}, {\n  value: 'Reply a message',\n  id: 'reply-a-message',\n  children: []\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2 {...{\n      \"id\": \"message-object\"\n    }}>{`Message object`}</h2>\n    <p>{`A message is represented by `}<inlineCode parentName=\"p\">{`ChatMessage`}</inlineCode>{` model.\nDepending on combination of its properties messages appear differently, a screenshot on the left showcases the most common types of messages. A screenshot on the right shows how some of `}<inlineCode parentName=\"p\">{`ChatMessage`}</inlineCode>{` properties are reflected in views:`}</p>\n    <img src=\"../img/messages-showcase.png\" width=\"40%\" />\n    <img src=\"../img/messages-properties.png\" width=\"40%\" />\n    <h2 {...{\n      \"id\": \"optimistic-updates\"\n    }}>{`Optimistic updates`}</h2>\n    <p>{`Optimistic updates model is applied to messages, meaning that when there is a change to local messages state it is propagated to chat components so it is displayed for users right away and then it's synchronized with backend. In case of synchronization failure users may be prompted to retry the failed action.`}</p>\n    <img src=\"../img/message-failure-resend.png\" width=\"30%\" />\n    <p>{`This makes `}<inlineCode parentName=\"p\">{`LocalMessageState`}</inlineCode>{` one of the most important properties in message's lifecycle, because it's used for keeping messages in sync with backend.`}</p>\n    <h2 {...{\n      \"id\": \"get-a-message-by-its-id\"\n    }}>{`Get a Message by its ID`}</h2>\n    <p>{`You can get a single message by its ID:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`import StreamChat \n\n/// Use the \\`ChatClient\\` to create a\n/// \\`ChatMessageController\\` with the \\`ChannelId\\`. \nlet messageController = chatClient.messageController(\n   cid: ChannelId(type: .messaging, id: \"general\"),\n   messageId: \"message-id\" \n) \n\n/// Get the message \nmessageController.synchronize { error in \n   // handle possible errors / access message \n   print(error ?? messageController.message!) \n} \n`}</code></pre>\n    <h2 {...{\n      \"id\": \"create-a-message\"\n    }}>{`Create a message`}</h2>\n    <p><inlineCode parentName=\"p\">{`ComposerVC`}</inlineCode>{` is a UI component that handles messages creation:`}</p>\n    <img src=\"../img/composer-ui.png\" width=\"50%\" />\n    <p>{`If you are using your own component for a message composer you can use `}<inlineCode parentName=\"p\">{`ChatChannelController`}</inlineCode>{` to create messages:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`let controller = ChatChannelController(\n    channelQuery: ChannelQuery(cid: ChannelId(type: .messaging, id: \"general\")),\n    client: client\n)\ncontroller.createNewMessage(\n    text: \"Hello World!\",\n    pinning: .noExpiration,\n    attachments: [image],\n    quotedMessageId: quotedMessage.id,\n    completion: { result in\n        switch result {\n        case .success(let messageId):\n            print(messageId)\n        case .failure(let error):\n            print(error)\n        }\n    }\n)\n`}</code></pre>\n    <p>{`More info on `}<a parentName=\"p\" {...{\n        \"href\": \"/stream-chat-swift/guides/pinned-messages\"\n      }}>{`Pinning`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"/stream-chat-swift/guides/working-with-attachments\"\n      }}>{`Attachments`}</a>{` can be found in corresponding guides.`}</p>\n    <p>{`More on `}<a parentName=\"p\" {...{\n        \"href\": \"#replying-a-message\"\n      }}>{`Quoted`}</a>{`  messages could be found in this guide below.`}</p>\n    <h2 {...{\n      \"id\": \"how-sending-a-message-works\"\n    }}>{`How sending a message works`}</h2>\n    <p>{`When `}<inlineCode parentName=\"p\">{`createNewMessage`}</inlineCode>{` is called, `}<inlineCode parentName=\"p\">{`ChatChannelController`}</inlineCode>{` creates a new message locally and schedules it for send.`}</p>\n    <p>{`Uploading is handled by an internal entity called `}<inlineCode parentName=\"p\">{`MessageSender`}</inlineCode>{`. It automatically starts\nuploading when it detects locally cached messages with `}<inlineCode parentName=\"p\">{`.pendingSend`}</inlineCode>{` state. `}</p>\n    <p>{`There is no need to take care of `}<inlineCode parentName=\"p\">{`MessageSender`}</inlineCode>{`, it is created and added to the list of background workers by `}<inlineCode parentName=\"p\">{`ChatClient`}</inlineCode>{`.`}</p>\n    <p>{`Sending of the message has the following phases:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`When a message with `}<inlineCode parentName=\"li\">{`.pendingSend`}</inlineCode>{` state local state appears in the db, the sender queues it in the sending queue for the channel the message belongs to.`}</li>\n      <li parentName=\"ol\">{`The pending messages are send one by one order by their `}<inlineCode parentName=\"li\">{`locallyCreatedAt`}</inlineCode>{` value ascending.`}</li>\n      <li parentName=\"ol\">{`When the message is being sent, its local state is changed to `}<inlineCode parentName=\"li\">{`.sending`}</inlineCode></li>\n      <li parentName=\"ol\">{`If the operation is successful, the local state of the message is changed to `}<inlineCode parentName=\"li\">{`nil`}</inlineCode>{`. If the operation fails, the local state of is changed to `}<inlineCode parentName=\"li\">{`sendingFailed`}</inlineCode>{`.`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{}}>{`                                    ┌──▶  \\`nil\\` if success \n  \\`pendingSend\\` ──────▶ \\`sending\\` ──┤                      \n                                    └─▶   \\`sendingFailed\\`                                                         \n`}</code></pre>\n    <p>{`This behavior makes it possible to update your UI with the new message immediately without blocking the UI:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`class MyChannelViewController: UIViewController {\n    let controller = ChannelController(cid: <#ChannelId#>)\n\n    func sendMessage(text: String) {\n        // This method creates a new message locally,\n        // initially with \\`localState == .pendingSend\\`\n        controller.createNewMessage(text: text)\n    }\n\n    // Example handling for Message local state:\n    func tableView(\n        _ tableView: UITableView,\n         cellForRowAt indexPath: IndexPath\n    ) -> UITableViewCell { \n        ...\n        let message = controller.messages[indexPath.row]\n        if message.localState == .pendingSend {\n            // show message as pending send\n\n        } else if message.localState == .sendingFailed {\n            // show retry button for the message\n        }\n        ...\n    }\n}\n`}</code></pre>\n    <div {...{\n      \"className\": \"admonition admonition-info alert alert--info\"\n    }}><div parentName=\"div\" {...{\n        \"className\": \"admonition-heading\"\n      }}><h5 parentName=\"div\"><span parentName=\"h5\" {...{\n            \"className\": \"admonition-icon\"\n          }}><svg parentName=\"span\" {...{\n              \"xmlns\": \"http://www.w3.org/2000/svg\",\n              \"width\": \"14\",\n              \"height\": \"16\",\n              \"viewBox\": \"0 0 14 16\"\n            }}><path parentName=\"svg\" {...{\n                \"fillRule\": \"evenodd\",\n                \"d\": \"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z\"\n              }}></path></svg></span>{`info`}</h5></div><div parentName=\"div\" {...{\n        \"className\": \"admonition-content\"\n      }}><p parentName=\"div\">{`When a message is created `}<inlineCode parentName=\"p\">{`ChannelController`}</inlineCode>{` sends `}<em parentName=\"p\">{`stop typing event`}</em>{` for this channel`}</p></div></div>\n    <h2 {...{\n      \"id\": \"edit-a-message\"\n    }}>{`Edit a message`}</h2>\n    <p>{`There is an action for editing messages:`}</p>\n    <img src=\"../img/messages-actions.png\" width=\"25%\" />\n    <p>{`When a user is editing a message `}<inlineCode parentName=\"p\">{`ComposerVC`}</inlineCode>{` takes the following appearance:`}</p>\n    <img src=\"../img/composer-edit.png\" width=\"50%\" />\n    <p>{`If you use your own implementation for composer view, the same could be done with `}<inlineCode parentName=\"p\">{`ChatMessageController`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`let messageController = chatClient.messageController(\n    cid: channelId,\n    messageId: messageId\n) \nmessageController.editMessage(text: \"World Hello!\") { error in\n    if let error = error {\n        print(error)\n    }\n}\n`}</code></pre>\n    <p>{`Editing a message has several phases:`}</p>\n    <p><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`MessageModel.localState`}</inlineCode>{` states when editing a message:`}</strong></p>\n    <pre><code parentName=\"pre\" {...{}}>{`                                    ┌──▶  \\`nil\\` if success \n  \\`pendingSync\\` ──────▶ \\`syncing\\` ──┤                      \n                                    └─▶   \\`syncingFailed\\`                                                         \n`}</code></pre>\n    <p>{`This behavior makes it possible to update your UI with the updated message immediately without blocking the UI:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`class MyChannelViewController: UIViewController {\n    let controller = ChannelController(cid: <#ChannelId#>)\n\n    func editMessage(message: ChatMessage, text: String) {\n        let messageController = controller.client.messageController(\n            cid: <#ChannelId#>,\n            messageId: message.id\n        )\n\n        // This method updates a message locally\n        // with the \\`localState == .pendingSync\\`\n        messageController.editMessage(text: text)\n    }\n\n    // Example handling for Message local state:\n    func tableView(\n        _ tableView: UITableView,\n        cellForRowAt indexPath: IndexPath\n    ) -> UITableViewCell { \n        ...\n        let message = controller.messages[indexPath.row]\n        if message.localState == .pendingSync {\n            // show message as not being synced with the servers\n\n        } else if message.localState == .syncingFailed {\n            // show retry button\n        }\n        ...\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"delete-a-message\"\n    }}>{`Delete a message`}</h2>\n    <p>{`A message can be deleted with the corresponding action:`}</p>\n    <img src=\"../img/messages-actions.png\" width=\"25%\" />\n    <p>{`When a user deletes a message it will be hidden for all the rest users in conversation, but it will appear for the user who deleted it like this:`}</p>\n  <img src=\"../img/message-delete.png\" width=\"50%\" />\n    <p>{`In an upcoming version it will become customizable, so it will be possible to hide deleted messages for all participants in a conversation.`}</p>\n    <p>{`Message deletion is handled by `}<inlineCode parentName=\"p\">{`ChatMessageController`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`let messageController = chatClient.messageController(\n    cid: channelId,\n    messageId: messageId\n) \nmessageController.deleteMessage { error in\n    if let error = error {\n        print(error)\n    }\n}\n`}</code></pre>\n    <p>{`If the message has `}<inlineCode parentName=\"p\">{`.pendingSend`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`.sendingFailed`}</inlineCode>{` state it will be removed locally as it hasn't been sent yet.`}</p>\n    <p>{`If the message has some other local state it should be removed on the backend.\nBefore the `}<inlineCode parentName=\"p\">{`delete`}</inlineCode>{` network call happens the local state is set to `}<inlineCode parentName=\"p\">{`deleting`}</inlineCode>{` and based on\nthe response it becomes either `}<inlineCode parentName=\"p\">{`nil`}</inlineCode>{` if request succeeds or `}<inlineCode parentName=\"p\">{`deletingFailed`}</inlineCode>{` if request fails.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`                ┌──▶  \\`nil\\` if success \n   \\`deleting\\` ──┤                      \n                └─▶  \\`deletingFailed\\`                                \n`}</code></pre>\n    <p>{`This behavior makes it possible to update your UI with the updated message immediately without blocking the UI:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`class MyChannelViewController: UIViewController {\n    let controller = ChannelController(cid: <#ChannelId#>)\n\n    func deleteMessage(message: Message) {\n        // Create a \\`MessageController\\` for the message you want to delete\n        let messageController = controller.client.messageController(\n            cid: channelController.channelQuery.cid,\n            messageId: message.id\n        )\n\n        // Delete the message\n        messageController.deleteMessage()\n    }\n\n    // Example handling for Message local state:\n    func tableView(\n        _ tableView: UITableView,\n        cellForRowAt indexPath: IndexPath\n    ) -> UITableViewCell { \n        ...\n        let message = controller.messages[indexPath.row]\n        if message.localState == .deleting {\n            // show message as being deleted\n\n        } else if message.localState == .deletingFailed {\n            // show retry button for deleting the message\n        }\n        ...\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"reply-a-message\"\n    }}>{`Reply a message`}</h2>\n    <p>{`There are two ways of replying a message:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Quoted reply`}</strong>{`.`}</p>\n        <p parentName=\"li\">{`In case if `}<inlineCode parentName=\"p\">{`ComposerVC`}</inlineCode>{` is used it looks like this during composing, and the resulting message will show both quoted message and the reply itself.`}</p>\n        <img src=\"../img/composer-quoted.png\" width=\"50%\" />\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Thread reply`}</strong></p>\n        <p parentName=\"li\">{`  Initiating a thread reply takes a user into thread details screen and the resulting message will look like a normal message that is placed inside the thread. It is also possible to duplicate it to the parent channel.`}</p>\n  <img src=\"../img/thread-details.png\" width=\"35%\" />\n        <p parentName=\"li\">{`  A message with thread replies appears like this:`}</p>\n  <img src=\"../img/thread-reply.png\" width=\"35%\" />\n      </li>\n    </ul>\n    <p>{`If you use your own implementation for message composer you can create a `}<strong parentName=\"p\">{`thread reply`}</strong>{` for a message with `}<inlineCode parentName=\"p\">{`MessageController`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`let messageController = chatClient.messageController(\n    cid: channelId,\n    messageId: \"message-id\"\n)\nmessageController.createNewReply(\n    text: \"Thread reply\",\n    pinning: nil,\n    attachments: [],\n    showReplyInChannel: true,\n    quotedMessageId: nil\n)\n`}</code></pre>\n    <p>{`A `}<strong parentName=\"p\">{`quoted reply`}</strong>{` can be created like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`let controller = ChatChannelController(\n    channelQuery: ChannelQuery(cid: ChannelId(type: .messaging, id: \"general\")),\n    client: client\n)\nchannelController.createNewMessage(\n    text: \"Quoted reply\",\n    pinning: nil,\n    attachments: [],\n    quotedMessageId: \"quoted-message-id\"\n)\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "]}]}