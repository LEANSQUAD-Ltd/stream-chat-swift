{"remainingRequest":"/Users/dmigach/Desktop/stream-chat-swift/stream-chat-swift-docs/node_modules/babel-loader/lib/index.js??ref--12-1!/Users/dmigach/Desktop/stream-chat-swift/stream-chat-swift-docs/node_modules/@docusaurus/mdx-loader/src/index.js??ref--12-2!/Users/dmigach/Desktop/stream-chat-swift/stream-chat-swift-docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--12-3!/Users/dmigach/Desktop/stream-chat-swift/stream-chat-swift-docs/docs/cheat-sheet.md","dependencies":[{"path":"/Users/dmigach/Desktop/stream-chat-swift/stream-chat-swift-docs/docs/cheat-sheet.md","mtime":1622479040877},{"path":"/Users/dmigach/Desktop/stream-chat-swift/stream-chat-swift-docs/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-cheat-sheet-md-166.json","mtime":1621247789632},{"path":"/Users/dmigach/Desktop/stream-chat-swift/stream-chat-swift-docs/node_modules/cache-loader/dist/cjs.js","mtime":1621247292444},{"path":"/Users/dmigach/Desktop/stream-chat-swift/stream-chat-swift-docs/node_modules/babel-loader/lib/index.js","mtime":1621247292381},{"path":"/Users/dmigach/Desktop/stream-chat-swift/stream-chat-swift-docs/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1621247302486},{"path":"/Users/dmigach/Desktop/stream-chat-swift/stream-chat-swift-docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1621247301494}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dmigach/Desktop/stream-chat-swift/stream-chat-swift-docs/docs/cheat-sheet.md"],"names":["React","mdx","frontMatter","title","metadata","toc","value","id","children","layoutProps","MDXLayout","MDXContent","components","props","isMDXComponent"],"mappings":"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AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAnCS,CAAL,CA3UK,CA+WL,cACE,UAAI,UAAU,CAAC,IAAf,EAAoB,cAAQ,UAAU,CAAC,IAAnB,EAA0B,yBAA1B,CAApB,CADF,CA/WK,CAkXL,eAAK,YAAM,UAAU,CAAC,KAAjB,CACD,YAAa,gBADZ,EAEE;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA7BS,CAAL,CAlXK,CAgZL,cACE,UAAI,UAAU,CAAC,IAAf,EAAoB,cAAQ,UAAU,CAAC,IAAnB,EAA0B,eAA1B,CAApB,CADF,CAhZK,CAmZL,eAAK,YAAM,UAAU,CAAC,KAAjB,CACD,YAAa,gBADZ,EAEE;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAjCS,CAAL,CAnZK,CAqbL,UACE,KAAM,SADR,EAEK,SAFL,CArbK,CAwbL,UACE,KAAM,iCADR,EAEK,iCAFL,CAxbK,CA2bL,cACE,UAAI,UAAU,CAAC,IAAf,EAAoB,cAAQ,UAAU,CAAC,IAAnB,EAA0B,2BAA1B,CAApB,CADF,CA3bK,CA8bL,eAAK,YAAM,UAAU,CAAC,KAAjB,CACD,YAAa,gBADZ,EAEE;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAvCS,CAAL,CA9bK,CAseL,cACE,UAAI,UAAU,CAAC,IAAf,EAAoB,cAAQ,UAAU,CAAC,IAAnB,EAA0B,yBAA1B,CAApB,CADF,CAteK,CAyeL,eAAK,YAAM,UAAU,CAAC,KAAjB,CACD,YAAa,gBADZ,EAEE;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAxBS,CAAL,CAzeK,CAkgBL,cACE,UAAI,UAAU,CAAC,IAAf,EAAoB,cAAQ,UAAU,CAAC,IAAnB,EAA0B,eAA1B,CAApB,CADF,CAlgBK,CAqgBL,eAAK,YAAM,UAAU,CAAC,KAAjB,CACD,YAAa,gBADZ,EAEE;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA7BS,CAAL,CArgBK,CAmiBL,UACE,KAAM,wBADR,EAEK,wBAFL,CAniBK,CAsiBL,aAAK,6CAAL,CAAkD,kBAAY,UAAU,CAAC,GAAvB,EAA6B,mBAA7B,CAAlD,CAAiH,sBAAjH,CAAuI,kBAAY,UAAU,CAAC,GAAvB,EAA6B,8BAA7B,CAAvI,CAAiN,iCAAjN,CAAkP,kBAAY,UAAU,CAAC,GAAvB,EAA6B,aAA7B,CAAlP,CAA2S,+BAA3S,CAA0U,kBAAY,UAAU,CAAC,GAAvB,EAA6B,OAA7B,CAA1U,CAA6X,MAA7X,CAAmY,kBAAY,UAAU,CAAC,GAAvB,EAA6B,KAA7B,CAAnY,CAAob,wCAApb,CAtiBK,CAuiBL,eAAK,YAAM,UAAU,CAAC,KAAjB,CACD,YAAa,gBADZ,EAEE;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA7BS,CAAL,CAviBK,CAqkBL,UACE,KAAM,4BADR,EAEK,4BAFL,CArkBK,CAwkBL,aAAK,0CAAL,CAA+C,kBAAY,UAAU,CAAC,GAAvB,EAA6B,WAA7B,CAA/C,CAAsG,oFAAtG,CAA0L,kBAAY,UAAU,CAAC,GAAvB,EAA6B,mBAA7B,CAA1L,CAAyP,sBAAzP,CAA+Q,kBAAY,UAAU,CAAC,GAAvB,EAA6B,8BAA7B,CAA/Q,CAAyV,iCAAzV,CAA0X,kBAAY,UAAU,CAAC,GAAvB,EAA6B,aAA7B,CAA1X,CAAmb,+BAAnb,CAAkd,kBAAY,UAAU,CAAC,GAAvB,EAA6B,OAA7B,CAAld,CAAqgB,MAArgB,CAA2gB,kBAAY,UAAU,CAAC,GAAvB,EAA6B,KAA7B,CAA3gB,CAA4jB,wCAA5jB,CAxkBK,CAykBL,eAAK,YAAM,UAAU,CAAC,KAAjB,CACD,YAAa,gBADZ,EAEE;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAzBS,CAAL,CAzkBK,CAmmBL,UACE,KAAM,UADR,EAEK,UAFL,CAnmBK,CAsmBL,UACE,KAAM,mBADR,EAEK,mBAFL,CAtmBK,CAymBL,aAAK,wDAAL,CAzmBK,CA0mBL,aAAG,cAAQ,UAAU,CAAC,GAAnB,EAAuB,kBAAY,UAAU,CAAC,QAAvB,EAAkC,oBAAlC,CAAvB,CAA4F,iCAA5F,CAAH,CA1mBK,CA2mBL,eAAK,YAAM,UAAU,CAAC,KAAjB,EAAiC;AAC1C;AACA;AACA,CAHS,CAAL,CA3mBK,CA+mBL,aAAK,6GAAL,CA/mBK,CAgnBL,eAAK,YAAM,UAAU,CAAC,KAAjB,CACD,YAAa,gBADZ,EAEE;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAvBS,CAAL,CAhnBK,CAwoBL,UACE,KAAM,oBADR,EAEK,oBAFL,CAxoBK,CA2oBL,aAAK,0CAAL,CAA+C,kBAAY,UAAU,CAAC,GAAvB,EAA6B,mBAA7B,CAA/C,CAA8G,iCAA9G,CA3oBK,CA4oBL,aAAG,cAAQ,UAAU,CAAC,GAAnB,EAAuB,kBAAY,UAAU,CAAC,QAAvB,EAAkC,oBAAlC,CAAvB,CAA4F,kCAA5F,CAAH,CA5oBK,CA6oBL,eAAK,YAAM,UAAU,CAAC,KAAjB,EAAiC;AAC1C;AACA;AACA,CAHS,CAAL,CA7oBK,CAipBL,eAAK,YAAM,UAAU,CAAC,KAAjB,CACD,YAAa,gBADZ,EAEE;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA7BS,CAAL,CAjpBK,CA+qBL,UACE,KAAM,mBADR,EAEK,mBAFL,CA/qBK,CAkrBL,aAAK,uCAAL,CAlrBK,CAmrBL,aAAG,cAAQ,UAAU,CAAC,GAAnB,EAAuB,kBAAY,UAAU,CAAC,QAAvB,EAAkC,yBAAlC,CAAvB,CAAiG,iCAAjG,CAAH,CAnrBK,CAorBL,eAAK,YAAM,UAAU,CAAC,KAAjB,EAAiC;AAC1C;AACA;AACA,CAHS,CAAL,CAprBK,CAwrBL,aAAK,iHAAL,CAxrBK,CAyrBL,eAAK,YAAM,UAAU,CAAC,KAAjB,CACD,YAAa,gBADZ,EAEE;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAzBS,CAAL,CAzrBK,CAmtBL,UACE,KAAM,yBADR,EAEK,yBAFL,CAntBK,CAstBL,UACE,KAAM,oBADR,EAEK,oBAFL,CAttBK,CAytBL,aAAK,yGAAL,CAA8G,kBAAY,UAAU,CAAC,GAAvB,EAA6B,UAA7B,CAA9G,CAAoK,IAApK,CAAwK,kBAAY,UAAU,CAAC,GAAvB,EAA6B,aAA7B,CAAxK,CAAiO,QAAjO,CAAyO,kBAAY,UAAU,CAAC,GAAvB,EAA6B,aAA7B,CAAzO,CAAkS,GAAlS,CAztBK,CA0tBL,aAAK,6CAAL,CAAkD,kBAAY,UAAU,CAAC,GAAvB,EAA6B,gBAA7B,CAAlD,CAA8G,gBAA9G,CAA8H,kBAAY,UAAU,CAAC,GAAvB,EAA6B,YAA7B,CAA9H,CAAsL,iJAAtL,CA1tBK,CA2tBL,eAAK,YAAM,UAAU,CAAC,KAAjB,CACD,YAAa,gBADZ,EAEE;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CArBS,CAAL,CA3tBK,CAivBL,aAAK,6MAAL,CAjvBK,CAkvBL,eAAK,YAAM,UAAU,CAAC,KAAjB,CACD,YAAa,gBADZ,EAEE;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAbS,CAAL,CAlvBK,CAgwBL,cAhwBK,CAiwBL,aAAK,KAAL,CAAU,cAAQ,UAAU,CAAC,GAAnB,EAAyB,YAAzB,CAAV,CAA0D,mCAA1D,CAA6F,kBAAY,UAAU,CAAC,GAAvB,EAA6B,GAA7B,CAA7F,CAA4I,mHAA5I,CAjwBK,CAkwBL,cAlwBK,CAmwBL,UACE,KAAM,4BADR,EAEK,4BAFL,CAnwBK,CAswBL,aAAK,wGAAL,CAtwBK,CAuwBL,aAAK,yDAAL,CAA8D,kBAAY,UAAU,CAAC,GAAvB,EAA6B,aAA7B,CAA9D,CAAuH,MAAvH,CAA6H,kBAAY,UAAU,CAAC,GAAvB,EAA6B,aAA7B,CAA7H,CAAsL,oBAAtL,CAA0M,kBAAY,UAAU,CAAC,GAAvB,EAA6B,uBAA7B,CAA1M,CAA6Q,GAA7Q,CAvwBK,CAwwBL,aAAG,cAAQ,UAAU,CAAC,GAAnB,EAAyB,+CAAzB,CAAH,CAxwBK,CAywBL,aAAK,4CAAL,CAAiD,kBAAY,UAAU,CAAC,GAAvB,EAA6B,kBAA7B,CAAjD,CAA+G,sGAA/G,CAAqN,kBAAY,UAAU,CAAC,GAAvB,EAA6B,cAA7B,CAArN,CAA+Q,YAA/Q,CAzwBK,CA0wBL,eAAK,YAAM,UAAU,CAAC,KAAjB,CACD,YAAa,gBADZ,EAEE;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAXS,CAAL,CA1wBK,CAsxBL,aAAG,cAAQ,UAAU,CAAC,GAAnB,EAAyB,mDAAzB,CAA4E,kBAAY,UAAU,CAAC,QAAvB,EAAkC,gBAAlC,CAA5E,CAAH,CAtxBK,CAuxBL,eAAK,YAAM,UAAU,CAAC,KAAjB,CACD,YAAa,gBADZ,EAEE;AACX;AACA;AACA;AACA;AACA;AACA,CARS,CAAL,CAvxBK,CAgyBL,aAAG,cAAQ,UAAU,CAAC,GAAnB,EAAyB,oDAAzB,CAAH,CAhyBK,CAiyBL,aAAK,4EAAL,CAAiF,kBAAY,UAAU,CAAC,GAAvB,EAA6B,YAA7B,CAAjF,CAAyI,sDAAzI,CAA+L,kBAAY,UAAU,CAAC,GAAvB,EAA6B,mBAA7B,CAA/L,CAA8P,mCAA9P,CAjyBK,CAkyBL,eAAK,YAAM,UAAU,CAAC,KAAjB,CACD,YAAa,gBADZ,EAEE;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CArBS,CAAL,CAlyBK,CAwzBL,UACE,KAAM,WADR,EAEG,cAAQ,UAAU,CAAC,IAAnB,EAA0B,WAA1B,CAFH,CAxzBK,CA2zBL,aAAK,2EAAL,CAAgF,kBAAY,UAAU,CAAC,GAAvB,EAA6B,WAA7B,CAAhF,CAAuI,UAAvI,CA3zBK,CA4zBL,aAAK,uCAAL,CA5zBK,CA6zBL,eAAK,YAAM,UAAU,CAAC,KAAjB,EAAiC;AAC1C;AACA;AACA;AACA;AACA,CALS,CAAL,CA7zBK,CAm0BL,aAAK,gBAAL,CAAqB,kBAAY,UAAU,CAAC,GAAvB,EAA6B,mBAA7B,CAArB,CAAoF,iBAApF,CAn0BK,CAo0BL,UACE,KAAM,gBADR,EAEK,gBAFL,CAp0BK,CAu0BL,aAAK,uMAAL,CAv0BK,CAw0BL,aAAK,KAAL,CAx0BK,CAAP,CA00BD,CAED,CACAD,UAAU,CAACG,cAAX,CAA4B,IAA5B","sourcesContent":["\n  import React from 'react';\n  import { mdx } from '@mdx-js/react';\n\n  export const frontMatter = {\n\ttitle: 'StreamChat Cheat Sheet'\n};\nexport const metadata = {\n  \"unversionedId\": \"cheat-sheet\",\n  \"id\": \"cheat-sheet\",\n  \"isDocsHomePage\": false,\n  \"title\": \"StreamChat Cheat Sheet\",\n  \"description\": \"This cheat sheet provides additional information to the official StreamChat SDK documentation on our website. You can find here more detailed information, richer code snippets, and commentary to the provided solutions.\",\n  \"source\": \"@site/docs/cheat-sheet.md\",\n  \"slug\": \"/cheat-sheet\",\n  \"permalink\": \"/stream-chat-swift/cheat-sheet\",\n  \"editUrl\": \"https://github.com/GetStream/stream-chat-swift/edit/main/stream-chat-swift-docs/docs/cheat-sheet.md\",\n  \"version\": \"current\"\n};\n  /* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const toc = [{\n  value: 'Chat Client',\n  id: 'chat-client',\n  children: [{\n    value: 'Creating a New Instance of Chat Client',\n    id: 'creating-a-new-instance-of-chat-client',\n    children: []\n  }, {\n    value: 'How Many <code>ChatClient</code> Instances Do I Need?',\n    id: 'how-many-chatclient-instances-do-i-need',\n    children: []\n  }]\n}, {\n  value: 'User',\n  id: 'user',\n  children: [{\n    value: 'Setting the current user',\n    id: 'setting-the-current-user',\n    children: []\n  }, {\n    value: 'Logging out',\n    id: 'logging-out',\n    children: []\n  }]\n}, {\n  value: 'Connection',\n  id: 'connection',\n  children: [{\n    value: 'Handling the connection manually',\n    id: 'handling-the-connection-manually',\n    children: []\n  }, {\n    value: 'Observing connection changes',\n    id: 'observing-connection-changes',\n    children: []\n  }]\n}, {\n  value: 'Channel List',\n  id: 'channel-list',\n  children: [{\n    value: 'Getting the Channels with the Current User as Member',\n    id: 'getting-the-channels-with-the-current-user-as-member',\n    children: []\n  }]\n}, {\n  value: 'Channel',\n  id: 'channel',\n  children: [{\n    value: 'Getting Messages in the Channel',\n    id: 'getting-messages-in-the-channel',\n    children: []\n  }, {\n    value: 'Creating a new Channel',\n    id: 'creating-a-new-channel',\n    children: []\n  }, {\n    value: 'Creating a new 1-1 Channel',\n    id: 'creating-a-new-1-1-channel',\n    children: []\n  }]\n}, {\n  value: 'Messages',\n  id: 'messages',\n  children: [{\n    value: 'Sending a Message',\n    id: 'sending-a-message',\n    children: []\n  }, {\n    value: 'Deleting a Message',\n    id: 'deleting-a-message',\n    children: []\n  }, {\n    value: 'Editing a Message',\n    id: 'editing-a-message',\n    children: []\n  }]\n}, {\n  value: 'Working with Extra Data',\n  id: 'working-with-extra-data',\n  children: [{\n    value: 'What is Extra Data',\n    id: 'what-is-extra-data',\n    children: []\n  }, {\n    value: 'Defining Custom Extra Data',\n    id: 'defining-custom-extra-data',\n    children: []\n  }]\n}, {\n  value: 'Under the Hood',\n  id: 'under-the-hood',\n  children: []\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <p>{`This cheat sheet provides additional information to the official `}<a parentName=\"p\" {...{\n        \"href\": \"https://getstream.io/chat/docs/introduction/?language=swift\"\n      }}>{`StreamChat SDK documentation`}</a>{` on our website. You can find here more detailed information, richer code snippets, and commentary to the provided solutions.`}</p>\n    <h4 {...{\n      \"id\": \"summary\"\n    }}>{`Summary`}</h4>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#chat-client\"\n        }}>{`Chat Client`}</a>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#creating-a-new-instance-of-chat-client\"\n            }}>{`Creating a New Instance of Chat Client`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#how-many-chatclient-instances-do-i-need\"\n            }}>{`How Many ChatClient Instances Do I Need?`}</a></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#user\"\n        }}>{`User`}</a>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#setting-the-current-user\"\n            }}>{`Setting the current user`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#logging-out\"\n            }}>{`Logging out`}</a></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#connection\"\n        }}>{`Connection`}</a>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#handling-the-connection-manually\"\n            }}>{`Handling the connection manually`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#observing-connection-changes\"\n            }}>{`Observing connection changes`}</a></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#channel-list\"\n        }}>{`Channel List`}</a>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#getting-the-channels-with-the-current-user-as-member\"\n            }}>{`Getting the Channels with the Current User as Member`}</a></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#channel\"\n        }}>{`Channel`}</a>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#getting-messages-in-the-channel\"\n            }}>{`Getting Messages in the Channel`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#creating-a-new-channel\"\n            }}>{`Creating a new Channel`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#creating-a-new-1-1-channel\"\n            }}>{`Creating a new 1-1 Channel`}</a></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#messages\"\n        }}>{`Messages`}</a>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#sending-a-message\"\n            }}>{`Sending a Message`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#deleting-a-message\"\n            }}>{`Deleting a Message`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#editing-a-message\"\n            }}>{`Editing a Message`}</a></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#working-with-extra-data\"\n        }}>{`Working with Extra Data`}</a>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#what-is-extra-data\"\n            }}>{`What is Extra Data`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#defining-custom-extra-data\"\n            }}>{`Defining Custom Extra Data`}</a></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#under-the-hood\"\n        }}>{`Under the Hood`}</a></li>\n    </ul>\n    <hr></hr>\n    <p>{`Didn't find what you were looking for? Open an `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/GetStream/stream-chat-swift/issues\"\n      }}>{`issue in our repo`}</a>{` and suggest a new topic!`}</p>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"chat-client\"\n    }}>{`Chat Client`}</h2>\n    <h3 {...{\n      \"id\": \"creating-a-new-instance-of-chat-client\"\n    }}>{`Creating a New Instance of Chat Client`}</h3>\n    <p>{`There are several basic approaches to creating a `}<inlineCode parentName=\"p\">{`ChatClient`}</inlineCode>{` instance.`}</p>\n    <p><strong parentName=\"p\">{`In the most simple setup, you can create a singleton instance`}</strong>{` of `}<inlineCode parentName=\"p\">{`ChatClient`}</inlineCode>{` and access it from everywhere:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`extension ChatClient {\n    /// The singleton instance of \\`ChatClient\\`\n    static let shared: ChatClient = {\n        let config = ChatClientConfig(apiKey: APIKey(\"qk4nn7rpcn75\"))\n        return ChatClient(config: config, tokenProvider: .closure { chatClient, completion in\n            let token = ... // Provide the StreamChat token for the current user\n            completion(.success(token))\n        })\n    }()\n}\n`}</code></pre>\n    <p>{`Another approach is to `}<strong parentName=\"p\">{`create `}<inlineCode parentName=\"strong\">{`ChatClient`}</inlineCode>{` instance only locally and pass it down to the view controller hierarchy`}</strong>{`. `}</p>\n    <p>{`For example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`class AppDelegate: UIResponder, UIApplicationDelegate {\n    func application(\n        _ application: UIApplication,\n        didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?\n    ) Bool {\n        let config = ChatClientConfig(apiKey: APIKey(\"qk4nn7rpcn75\"))\n        let chatClient = ChatClient(config: config, tokenProvider: .closure { chatClient, completion in\n            let token = ... // Provide the StreamChat token for the current user\n            completion(.success(token))\n        })\n        \n        let rootViewController = YourMainViewController(chatClient: chatClient)\n        \n        // your code to make rootViewController visible\n\n        return true\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"how-many-chatclient-instances-do-i-need\"\n    }}>{`How Many `}<inlineCode parentName=\"h3\">{`ChatClient`}</inlineCode>{` Instances Do I Need?`}</h3>\n    <p>{`For the absolute majority of use cases, an app needs one instance of the `}<inlineCode parentName=\"p\">{`Client`}</inlineCode>{` object. `}</p>\n    <p><strong parentName=\"p\">{`You need multiple `}<inlineCode parentName=\"strong\">{`Client`}</inlineCode>{` instances in one app when:`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`You want to simultaneously show content from multiple different chats (with different `}<inlineCode parentName=\"li\">{`AppId`}</inlineCode>{` values)`}</li>\n      <li parentName=\"ul\">{`You want to simultaneously show the same content as seen for different kinds of users. For example, the left window for an admin user, the right window for an anonymous user. In this case, it's recommended to always use `}<inlineCode parentName=\"li\">{`isLocalStorageEnabled = false`}</inlineCode>{` configuration.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"user\"\n    }}>{`User`}</h2>\n    <h3 {...{\n      \"id\": \"setting-the-current-user\"\n    }}>{`Setting the current user`}</h3>\n    <p>{`A valid StreamChat `}<inlineCode parentName=\"p\">{`token`}</inlineCode>{` is all you need to properly set your current app user as the current user of `}<inlineCode parentName=\"p\">{`ChatClient`}</inlineCode>{`. This token can't be created locally and it must be provided by your backend.`}</p>\n    <p><inlineCode parentName=\"p\">{`ChatClient`}</inlineCode>{` uses `}<inlineCode parentName=\"p\">{`TokenProvider`}</inlineCode>{` to fetch the token of the currently logged in user from you. There are several types of `}<inlineCode parentName=\"p\">{`TokenProvider`}</inlineCode>{`s you can choose from:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`/// A token provider accepting a closure as a parameter. This is most likely the provider you \n/// want to use in your production app.\nchatClient.tokenProvider = .closure { chatClient, completion in \n  let token = ... // Obtain the chat token from your system\n  completion(token)\n}\n\n/// A token provider for anonymous users. You'd use this provider for situations when no\n/// specific user is logged in.\nchatClient.tokenProvider = .anonymous\n\n/// A token provider for a guest user with the specific <id> and name.\nchatClient.tokenProvider = .guest(userId: <id>, name: \"Luke\", imageURL: nil)\n\n/// A token provider returning the hardcoded token\nchatClient.tokenProvider = .static(<token>)\n\n/// A token provider that can be used for development. Development tokens are not validated by the servers.\nchatClient.tokenProvider = .development(userId: <id>)\n`}</code></pre>\n    <p>{`When the currently logged-in user of the app changes, or when you assign a new token provider to `}<inlineCode parentName=\"p\">{`ChatClient`}</inlineCode>{`, you should tell `}<inlineCode parentName=\"p\">{`ChatClient`}</inlineCode>{` to reload its current user:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`/// Gets a new token from \\`TokenProvider\\` and if the new user id differs from the current one, \n/// reloads the data and reconnects with the new user.\nchatClient.currentUserController().reloadUserIfNeeded()\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"logging-out\"\n    }}>{`Logging out`}</h3>\n    <p>{`It's impossible to log out a user because the `}<inlineCode parentName=\"p\">{`Client`}</inlineCode>{` instance must always have a user assigned. `}</p>\n    <p><strong parentName=\"p\">{`However, you can simulate this behavior by:`}</strong></p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Destroying the current `}<inlineCode parentName=\"strong\">{`Client`}</inlineCode>{` instance`}</strong></li>\n    </ul>\n    <p>{`You can destroy all references to the `}<inlineCode parentName=\"p\">{`Client`}</inlineCode>{` instance once you don't need it. Every `}<inlineCode parentName=\"p\">{`Controller`}</inlineCode>{` holds a strong reference to the parent `}<inlineCode parentName=\"p\">{`Client`}</inlineCode>{` instance. You can use this to your advantage and have your view controllers holding a strong reference to `}<inlineCode parentName=\"p\">{`Client`}</inlineCode>{` via their referenced controllers. Once all view controllers are deallocated, so are the controllers and, finally, the `}<inlineCode parentName=\"p\">{`Client`}</inlineCode>{` instance.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`or `}<strong parentName=\"li\">{`Setting the current user as anonymous`}</strong></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`chatClient.tokenProvider = .anonymous\nchatClient.currentUserController().reloadUserIfNeeded()\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`or `}<strong parentName=\"li\">{`Disconnecting the client`}</strong></li>\n    </ul>\n    <p>{`This method makes the `}<inlineCode parentName=\"p\">{`Client`}</inlineCode>{` instance stop receiving any updates from the server. You can later reconnect without having to set the current user again.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`chatClient.connectionController().disconnect()\n\n// when you want to reconnect\n\nchatClient.connectionController().connect { error in \n    if error == nil {\n       // connection successful\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"connection\"\n    }}>{`Connection`}</h2>\n    <h3 {...{\n      \"id\": \"handling-the-connection-manually\"\n    }}>{`Handling the connection manually`}</h3>\n    <p>{`If `}<inlineCode parentName=\"p\">{`config.shouldConnectAutomatically`}</inlineCode>{` is set to `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{` the establishment of a web-socket connection has to be done manually via `}<inlineCode parentName=\"p\">{`connect/disconnect`}</inlineCode>{` in `}<inlineCode parentName=\"p\">{`ChatConnectionController`}</inlineCode>{`, otherwise this is done automatically in the `}<inlineCode parentName=\"p\">{`CurrentUserController`}</inlineCode>{` when setting the current user.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`chatClient.connectionController().connect { error in \n    if error == nil {\n       // connection successful\n    }\n}\n// disconnecting\nchatClient.connectionController().disconnect()\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"observing-connection-changes\"\n    }}>{`Observing connection changes`}</h3>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Using UIKit and Delegates`}</strong></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`class LoggedInUserViewController: UIViewController {\n    ...\n    override func viewDidLoad() {\n       super.viewDidLoad()\n       chatClient.connectionController.delegate = self\n    }\n}\n\nextension LoggedInUserViewController: ChatConnectionControllerDelegate {\n    func connectionController(_ controller: ChatConnectionController, didUpdateConnectionStatus status: ConnectionStatus) {\n        switch status {\n        case .connected:\n            onlineIndicatorView.tintColor = .green\n        case .disconnected, .disconnecting,  .initialized:\n            onlineIndicatorView.tintColor = .red\n        case .connecting:\n            break\n        }\n    }\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Using UIKit and Combine`}</strong></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`class LoggedInUserViewController: UIViewController {\n    \nprivate var cancellables: Set<AnyCancellable> = []\n\n    override func viewDidLoad() {\n       super.viewDidLoad()\n\n        chatClient\n             .connectionController\n             .channelsChangesPublisher\n             .receive(on: RunLoop.main)\n             .sink { [weak self] state in\n                // state changed\n             }\n             .store(in: &cancellables)\n    }\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Using SwiftUI and Combine`}</strong></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`struct LoggedInUserView: View {\n    @ObservedObject var connection: ChatConnectionController.ObservableObject\n\n    init(connectionController: ChatConnectionController) {\n        self.connection = connectionController.observableObject\n    }\n\n    var body: some View {\n        switch connection.connectionStatus {\n         case .connected:\n             Text(\"Connected\")\n         case .disconnected, .disconnecting:\n             Text(\"Disconnected\")\n         case .connecting, .initialized:\n             Text(\"Connecting\")\n         }\n        .navigationBarTitle(\"Logged In User\")\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"channel-list\"\n    }}>{`Channel List`}</h2>\n    <h3 {...{\n      \"id\": \"getting-the-channels-with-the-current-user-as-member\"\n    }}>{`Getting the Channels with the Current User as Member`}</h3>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Using UIKit and Delegates`}</strong></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`class ChannelListViewController: UIViewController {\n\n    let channelListController = chatClient.channelListController(\n       query: ChannelListQuery(filter: .containMembers(userIds: [chatClient.currentUserId]))\n    )\n\n    override func viewDidLoad() {\n       super.viewDidLoad()\n       channelListController.delegate = self\n\n       // update your UI with the cached channels first, for example by calling reloadData() on UITableView\n       let locallyAvailableChannels = channelListController.channels\n\n       // call \\`synchronize()\\` to update the locally cached data. the updates will be delivered using delegate methods\n       channelListController.synchronize()\n    }\n}\n\nextension ChannelListViewController: ChatChannelListControllerDelegate { \n    func controller(_ controller: ChatChannelListController, didChangeChannels changes: [ListChange<Channel>]) {\n        // The list of channels has changed. You can for example animate the changes:\n\n        tableView.beginUpdates()        \n        for change in changes {\n            switch change {\n            case let .insert(_, index: index):\n                tableView.insertRows(at: [index], with: .automatic)\n            // etc ...\n            }\n        }        \n        tableView.endUpdates()\n    }\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Using UIKit and Combine`}</strong></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`class ChannelsViewController: UIViewController {\n\n    let channelListController = chatClient.channelListController(\n       query: ChannelListQuery(filter: .containMembers(userIds: [chatClient.currentUserId]))\n    )\n\n    private var cancellables: Set<AnyCancellable> = []\n\n    override func viewDidLoad() {\n       super.viewDidLoad()\n\n       // update your UI with the cached channels first, for example by calling reloadData() on UITableView\n       let locallyAvailableChannels = channelListController.channels\n\n       // Observe changes to the list from the publishers\n        channelListController\n             .channelsChangesPublisher\n             .receive(on: RunLoop.main)\n             .sink { [weak self] changes in\n                // animate the changes to the channel list\n             }\n             .store(in: &cancellables)\n\n       // call \\`synchronize()\\` to update the locally cached data. the updates will be delivered using channelsChangesPublisher\n       channelListController.synchronize()\n    }\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Using SwiftUI`}</strong></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`\n// View definition\n\nstruct ChannelListView: View {\n    @ObservedObject var channelList: ChatChannelListController.ObservableObject\n\n    init(channelListController: ChatChannelListController) {\n        self.channelList = channelListController.observableObject\n    }\n\n    var body: some View {\n        VStack {\n            List(channelList.channels, id: \\\\.self) { channel in\n                Text(channel.extraData.name ?? \"missing channel name\")\n            }\n        }\n        .navigationBarTitle(\"Channels\")\n        .onAppear { \n            // call \\`synchronize()\\` to update the locally cached data.\n            channelList.synchronize() \n        }\n    }\n}\n\n// Usage\n\nlet channelListController = chatClient.channelListController(\n    query: ChannelListQuery(filter: .containMembers(userIds: [chatClient.currentUserId]))\n)\n\nlet view = ChannelListView(channelListController: channelListController)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"channel\"\n    }}>{`Channel`}</h2>\n    <h3 {...{\n      \"id\": \"getting-messages-in-the-channel\"\n    }}>{`Getting Messages in the Channel`}</h3>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Using UIKit and Delegates`}</strong></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`class ChannelViewController: UIViewController {\n\n   let channelController = chatClient.channelController(cid: <id of the channel>)\n\n   override func viewDidLoad() {\n       super.viewDidLoad()\n       channelController.delegate = self\n\n       // update your UI with the cached messages first, for example by calling reloadData() on UITableView\n       let locallyAvailableMessages = channelController.messages\n\n       // call \\`synchronize()\\` to update the locally cached data. the updates will be delivered using delegate methods\n       channelController.synchronize()\n   }\n}\n\nextension ChannelViewController: ChatChannelControllerDelegate { \n    func channelController(_ channelController: ChatChannelController, didUpdateMessages changes: [ListChange<ChatMessage>]) {\n        // For example, you can animate the changes in UITableView\n        tableView.beginUpdates()\n        \n        for change in changes {\n            switch change {\n            case let .insert(_, index: index):\n                tableView.insertRows(at: [index], with: .automatic)\n            case let .move(_, fromIndex: fromIndex, toIndex: toIndex):\n                tableView.moveRow(at: fromIndex, to: toIndex)\n            case let .update(_, index: index):\n                tableView.reloadRows(at: [index], with: .automatic)\n            case let .remove(_, index: index):\n                tableView.deleteRows(at: [index], with: .automatic)\n            }\n        }\n        \n        tableView.endUpdates()\n    }\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Using UIKit and Combine`}</strong></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`class ChannelViewController: UIViewController {\n\n   let channelController = chatClient.channelController(cid: <id of the channel>)\n\n   private var cancellables: Set<AnyCancellable> = []\n\n   override func viewDidLoad() {\n       super.viewDidLoad()\n\n       // update your UI with the cached messages first, for example by calling reloadData() on UITableView\n       let locallyAvailableMessages = channelController.messages\n\n       // Observe changes to the list of messages\n        channelListController\n             .messagesChangesPublisher\n             .receive(on: RunLoop.main)\n             .sink { [weak self] changes in\n                // animate the changes to the message list\n             }\n             .store(in: &cancellables)\n   }\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Using SwiftUI`}</strong></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`\n// View definition\nstruct ChannelView: View {\n    @ObservedObject var channelController: ChatChannelController.ObservableObject\n\n    init(channelController: ChatChannelController) {\n        self.channelController = channelController.observableObject\n    }\n\n    var body: some View {\n        VStack {\n            List(channelController.messages, id: \\\\.self) { message in\n                Text(message.text)\n            }\n        }\n        .navigationBarTitle(channelController.channel.name ?? \"Messages\")\n        .onAppear { \n            // call \\`synchronize()\\` to start updating the cached data\n            channelController.synchronize() \n        }\n    }\n}\n\n// Usage\nlet channelController = chatClient.channelController(cid: <channel id>)\nlet view = ChannelView(channelController: channelController)\n\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"creating-a-new-channel\"\n    }}>{`Creating a new Channel`}</h3>\n    <p>{`You can create a new channel by creating a `}<inlineCode parentName=\"p\">{`ChannelController`}</inlineCode>{` for it and calling `}<inlineCode parentName=\"p\">{`synchronize { error in ... }`}</inlineCode>{`. Once the completion block of `}<inlineCode parentName=\"p\">{`synchronize`}</inlineCode>{` is called, and the provided `}<inlineCode parentName=\"p\">{`error`}</inlineCode>{` is `}<inlineCode parentName=\"p\">{`nil`}</inlineCode>{`, the channel creation was successful.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`// A unique identifier of a channel\nlet id = UUID().uuidString\n\n// A \\`ChannelId\\` for the new channel. \\`ChannelId\\` is a combination of channel's type and a unique identifier of the channel.\nlet cid = ChannelId(type: .messaging, id: id)\n\nlet controller = chatClient.channelController(\n    createChannelWithId: cid, // Assign \\`cid\\` for the new channel\n    members: [chatClient.currentUserId], // Add users to the new channel\n    extraData: .init(name: \"My new channel\", imageURL: nil) // Set the name for the channel\n)\n\n// At this point, the channel does not exist yet, but you can use the \\`controller\\` already. \n//\n// This is handy for optimistic UI updates. You can already show the chat UI to the user while\n// the channel is being created. The message sending UI should be disabled until the \\`controller\\`'s state \n// changes to \\`remoteDataFetched\\`.\nlet someViewController = SomeViewController(channelController: controller)\n\n// ... your code to present the view controller\n\n// The channel is created when \\`synchronize { }\\` is called:\ncontroller.synchronize { error in\n    if error == nil {\n        // The channel was successfully created\n    }\n} \n`}</code></pre>\n    <h3 {...{\n      \"id\": \"creating-a-new-1-1-channel\"\n    }}>{`Creating a new 1-1 Channel`}</h3>\n    <p>{`Direct messaging channels derived their `}<inlineCode parentName=\"p\">{`ChannelId`}</inlineCode>{` automatically from their members. You can create a new 1-1 channel by creating a `}<inlineCode parentName=\"p\">{`ChannelController`}</inlineCode>{` for it and calling `}<inlineCode parentName=\"p\">{`synchronize { error in ... }`}</inlineCode>{`. Once the completion block of `}<inlineCode parentName=\"p\">{`synchronize`}</inlineCode>{` is called, and the provided `}<inlineCode parentName=\"p\">{`error`}</inlineCode>{` is `}<inlineCode parentName=\"p\">{`nil`}</inlineCode>{`, the channel creation was successful.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`\nlet newChannelMemberIds: Set<UserId> = [chatClient.currentUserId, someOtherUserId]\n\nlet controller = chatClient.channelController(createDirectMessageChannelWith: newChannelMemberIds)\n\n// At this point, the channel does not exist created yet, but you can use the \\`controller\\` already. \n//\n// This is handy for optimistic UI updates. You can already show the chat UI to the user while\n// the channel is being created. The message sending UI should be disabled until the \\`controller\\`'s state \n// changes to \\`remoteDataFetched\\`. \n// \n// If there are some existing messages between the current user and \\`someOtherUser\\`, they will\n// be loaded automatically by \\`controller\\`.\nlet someViewController = SomeViewController(channelController: controller)\n\n// ... your code to present the view controller\n\n// The channel is created when \\`synchronize { }\\` is called:\ncontroller.synchronize { error in\n    if error == nil {\n        // The channel was successfully created\n    }\n} \n`}</code></pre>\n    <h2 {...{\n      \"id\": \"messages\"\n    }}>{`Messages`}</h2>\n    <h3 {...{\n      \"id\": \"sending-a-message\"\n    }}>{`Sending a Message`}</h3>\n    <p>{`Sending a new message to a channel has several phases.`}</p>\n    <p><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`Message.localState`}</inlineCode>{` phases when sending a message:`}</strong></p>\n    <pre><code parentName=\"pre\" {...{}}>{`                                    ┌──▶  \\`nil\\` if success \n  \\`pendingSend\\` ──────▶ \\`sending\\` ──┤                      \n                                    └─▶   \\`sendingFailed\\`                                                         \n`}</code></pre>\n    <p>{`This behavior makes it possible to update your UI with the new message immediately without blocking the UI.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`class MyChannelViewController: UIViewController {\n    let controller = ChannelController(cid: <id of the channel>)\n\n    func sendMessage(text: String) {\n        // This method creates a new message locally, initially with \\`localState == .pendingSend\\`\n        controller.createNewMessage(text: text)\n    }\n\n    // Example handling for Message local state:\n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) UITableViewCell { \n        ...\n        let message = controller.messages[indexPath.row]\n        if message.localState == .pendingSend {\n            // show message as pending send\n\n        } else if message.localState == .sendingFailed {\n            // show retry button for the message\n        }\n        ...\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"deleting-a-message\"\n    }}>{`Deleting a Message`}</h3>\n    <p>{`Deleting a message is performed using a `}<inlineCode parentName=\"p\">{`MessageController`}</inlineCode>{` created for the given message.`}</p>\n    <p><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`Message.localState`}</inlineCode>{` phases when deleting a message:`}</strong></p>\n    <pre><code parentName=\"pre\" {...{}}>{`                ┌──▶  \\`nil\\` if success \n   \\`deleting\\` ──┤                      \n                └─▶  \\`deletingFailed\\`                                \n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`class MyChannelViewController: UIViewController {\n    let controller = ChannelController(cid: <id of the channel>)\n\n    func deleteMessage(message: Message) {\n        // Create a \\`MessageController\\` for the message you want to delete\n        let messageController = controller.client.messageController(\n            cid: channelController.channelQuery.cid,\n            messageId: message.id\n        )\n\n        // Delete the message\n        messageController.deleteMessage()\n    }\n\n    // Example handling for Message local state:\n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) UITableViewCell { \n        ...\n        let message = controller.messages[indexPath.row]\n        if message.localState == .deleting {\n            // show message as being deleted\n\n        } else if message.localState == .deletingFailed {\n            // show retry button for deleting the message\n        }\n        ...\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"editing-a-message\"\n    }}>{`Editing a Message`}</h3>\n    <p>{`Editing a message has several phases.`}</p>\n    <p><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`MessageModel.localState`}</inlineCode>{` phases when editing a message:`}</strong></p>\n    <pre><code parentName=\"pre\" {...{}}>{`                                    ┌──▶  \\`nil\\` if success \n  \\`pendingSync\\` ──────▶ \\`syncing\\` ──┤                      \n                                    └─▶   \\`syncingFailed\\`                                                         \n`}</code></pre>\n    <p>{`This behavior makes it possible to update your UI with the updated message immediately without blocking the UI.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`class MyChannelViewController: UIViewController {\n    let controller = ChannelController(cid: <id of the channel>)\n\n    func editMessage(message: ChatMessage, text: String) {\n        let messageController = controller.client.messageController(cid: <id of the channel>, messageId: message.id)\n\n        // This method updates a message locally with the \\`localState == .pendingSync\\`\n        messageController.editMessage(text: text)\n    }\n\n    // Example handling for Message local state:\n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) UITableViewCell { \n        ...\n        let message = controller.messages[indexPath.row]\n        if message.localState == .pendingSync {\n            // show message as not being synced with the servers\n\n        } else if message.localState == .syncingFailed {\n            // show retry button\n        }\n        ...\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"working-with-extra-data\"\n    }}>{`Working with Extra Data`}</h2>\n    <h3 {...{\n      \"id\": \"what-is-extra-data\"\n    }}>{`What is Extra Data`}</h3>\n    <p>{`You can add additional (extra) data to entities in the chat system. For now, you can add extra data to `}<inlineCode parentName=\"p\">{`ChatUser`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`ChatChannel`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`ChatMessage`}</inlineCode>{`.`}</p>\n    <p>{`The extra data types are defined using the `}<inlineCode parentName=\"p\">{`ExtraDataTypes`}</inlineCode>{` protocol the `}<inlineCode parentName=\"p\">{`ChatClient`}</inlineCode>{` and other types are generic over. Here you can see the protocol declaration including the default extra data types for the mentioned entities:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`public protocol ExtraDataTypes {\n    /// An extra data type for \\`ChatUser\\`.\n    associatedtype User: UserExtraData = NoExtraData\n    \n    /// An extra data type for \\`ChatMessage\\`.\n    associatedtype Message: MessageExtraData = NoExtraData\n    \n    /// An extra data type for \\`ChatChannel\\`.\n    associatedtype Channel: ChannelExtraData = NoExtraData\n    \n    /// An extra data type for \\`ChatMessageReaction\\`.\n    associatedtype MessageReaction: MessageReactionExtraData = NoExtraData\n    \n    /// An extra data type for \\`ChatMessageAttachment\\`.\n    associatedtype Attachment: AttachmentExtraData = NoExtraData\n}\n\nclass _ChatClient<ExtraData: ExtraDataTypes> { ... }\n\n`}</code></pre>\n    <p>{`To make working with generic types more convenient, we expose several typealiases. This way, generic types' underlying extra data complexity is hidden, while the whole system stays safe at compile-time. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`/// A convenience typealias for \\`ChatClient\\` with the default data types.\npublic typealias ChatClient = _ChatClient<NoExtraData>\n\n/// A convenience typealias for \\`ChatUser\\` with the default data types.\npublic typealias ChatUser = _ChatUser<NoExtraData>\n\n/// A convenience typealias for \\`ChatChannel\\` with the default data types.\npublic typealias ChatChannel = _Chatchannel<NoExtraData>\n\n...\n\n`}</code></pre>\n    <hr></hr>\n    <p>{`⚠️ `}<strong parentName=\"p\">{`Important:`}</strong>{` If the name of the type has the `}<inlineCode parentName=\"p\">{`_`}</inlineCode>{` prefix, it's not meant to be used directly. You should instead use the convenience typealias without the prefix.`}</p>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"defining-custom-extra-data\"\n    }}>{`Defining Custom Extra Data`}</h3>\n    <p>{`Changing the default extra data types with your custom types is easy and takes a couple of easy steps.`}</p>\n    <p>{`For example, let's say you want to replace the default `}<inlineCode parentName=\"p\">{`NoExtraData`}</inlineCode>{` of `}<inlineCode parentName=\"p\">{`ChatChannel`}</inlineCode>{` with your custom `}<inlineCode parentName=\"p\">{`NameAndColorExtraData`}</inlineCode>{`:`}</p>\n    <p><strong parentName=\"p\">{`1. Define your custom Channel extra data type`}</strong></p>\n    <p>{`Your custom data type must conform to the `}<inlineCode parentName=\"p\">{`ChannelExtraData`}</inlineCode>{` protocol. The protocol has two requirements: the type must be codable, and it must expose a static `}<inlineCode parentName=\"p\">{`defaultValue`}</inlineCode>{` variable.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`/// Your custom ChatChannel extra data type\nstruct NameAndColorExtraData: ChannelExtraData {\n    \n    /// The value used when decoding the custom data type fails.\n    static var defaultValue = NameAndColorExtraData(name: \"Unknown\", colorName: nil)\n    \n    let name: String\n    let colorName: String?\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`2. Use the type in your custom implementation of `}<inlineCode parentName=\"strong\">{`ExtraDataTypes`}</inlineCode></strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`/// Custom implementation of \\`ExtraDataTypes\\` with \\`NameAndColorExtraData\\`\nenum MyCustomExtraData: ExtraDataTypes {\n    typealias Channel = NameAndColorExtraData\n\n    // Note: Unless you specify other custom data types, the default data types are used.\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`3. Define the following typealiases in your module`}</strong></p>\n    <p>{`You should define the convenience typealiases in the module where you use `}<inlineCode parentName=\"p\">{`StreamChat`}</inlineCode>{`. You can copy&paste the snippet below, and replace `}<inlineCode parentName=\"p\">{`MyCustomExtraData`}</inlineCode>{` with the type defined in step 2.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`import StreamChat\n\n// Change this typealias to your custom data types\ntypealias CustomExtraDataTypes = MyCustomExtraData // 👈 Your_Custom_Data_Type_Here 👈\n\ntypealias ChatClient = _ChatClient<CustomExtraDataTypes>\n\ntypealias ChatUser = _ChatUser<CustomExtraDataTypes.User>\ntypealias CurrentChatUser = _CurrentChatUser<CustomExtraDataTypes.User>\ntypealias ChatChannel = _ChatChannel<CustomExtraDataTypes> \ntypealias ChatChannelRead = _ChatChannelRead<CustomExtraDataTypes>\ntypealias ChatChannelMember = _ChatChannelMember<CustomExtraDataTypes.User>\ntypealias ChatMessage = _ChatMessage<CustomExtraDataTypes> \n\ntypealias CurrentChatUserController = _CurrentChatUserController<CustomExtraDataTypes>\ntypealias ChatChannelListController = _ChatChannelListController<CustomExtraDataTypes>\ntypealias ChatChannelController = _ChatChannelController<CustomExtraDataTypes>\ntypealias ChatMessageController = _ChatMessageController<CustomExtraDataTypes>\n\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"important\"\n    }}><strong parentName=\"h4\">{`Important`}</strong></h4>\n    <p>{`Extra data is embedded directly to the root object, not nested under any `}<inlineCode parentName=\"p\">{`extraData`}</inlineCode>{` object.`}</p>\n    <p>{`So if you have such a Channel object:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`{\n  'id': ....,\n  // all other default fields\n  'color': 'red'\n}\n`}</code></pre>\n    <p>{`You'd use the `}<inlineCode parentName=\"p\">{`MyCustomExtraData`}</inlineCode>{` defined above.`}</p>\n    <h2 {...{\n      \"id\": \"under-the-hood\"\n    }}>{`Under the Hood`}</h2>\n    <p>{`This section contains additional information about the SDK, which might help you use it best. However, you don't need to know such details for most use cases to use it in your project successfully.`}</p>\n    <p>{`WIP`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "]}]}