{"remainingRequest":"/Users/dmigach/Desktop/stream-chat-swift/stream-chat-swift-docs/node_modules/babel-loader/lib/index.js??ref--12-1!/Users/dmigach/Desktop/stream-chat-swift/stream-chat-swift-docs/node_modules/@docusaurus/mdx-loader/src/index.js??ref--12-2!/Users/dmigach/Desktop/stream-chat-swift/stream-chat-swift-docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--12-3!/Users/dmigach/Desktop/stream-chat-swift/stream-chat-swift-docs/docs/guides/working-with-a-channel.md","dependencies":[{"path":"/Users/dmigach/Desktop/stream-chat-swift/stream-chat-swift-docs/docs/guides/working-with-a-channel.md","mtime":1622479040880},{"path":"/Users/dmigach/Desktop/stream-chat-swift/stream-chat-swift-docs/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-guides-working-with-a-channel-md-11b.json","mtime":1622460726670},{"path":"/Users/dmigach/Desktop/stream-chat-swift/stream-chat-swift-docs/node_modules/cache-loader/dist/cjs.js","mtime":1621247292444},{"path":"/Users/dmigach/Desktop/stream-chat-swift/stream-chat-swift-docs/node_modules/babel-loader/lib/index.js","mtime":1621247292381},{"path":"/Users/dmigach/Desktop/stream-chat-swift/stream-chat-swift-docs/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1621247302486},{"path":"/Users/dmigach/Desktop/stream-chat-swift/stream-chat-swift-docs/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1621247301494}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/dmigach/Desktop/stream-chat-swift/stream-chat-swift-docs/docs/guides/working-with-a-channel.md"],"names":["React","mdx","frontMatter","title","metadata","toc","value","id","children","layoutProps","MDXLayout","MDXContent","components","props","require","default","isMDXComponent"],"mappings":"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","sourcesContent":["\n  import React from 'react';\n  import { mdx } from '@mdx-js/react';\n\n  export const frontMatter = {\n\ttitle: 'Working with a Channel'\n};\nexport const metadata = {\n  \"unversionedId\": \"guides/working-with-a-channel\",\n  \"id\": \"guides/working-with-a-channel\",\n  \"isDocsHomePage\": false,\n  \"title\": \"Working with a Channel\",\n  \"description\": \"Getting Channel Data\",\n  \"source\": \"@site/docs/guides/working-with-a-channel.md\",\n  \"slug\": \"/guides/working-with-a-channel\",\n  \"permalink\": \"/stream-chat-swift/guides/working-with-a-channel\",\n  \"editUrl\": \"https://github.com/GetStream/stream-chat-swift/edit/main/stream-chat-swift-docs/docs/guides/working-with-a-channel.md\",\n  \"version\": \"current\",\n  \"sidebar\": \"docs\",\n  \"previous\": {\n    \"title\": \"Working with Channel List\",\n    \"permalink\": \"/stream-chat-swift/guides/working-with-channel-list\"\n  },\n  \"next\": {\n    \"title\": \"Working with Messages\",\n    \"permalink\": \"/stream-chat-swift/guides/working-with-messages\"\n  }\n};\n  /* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const toc = [{\n  value: 'Getting Channel Data',\n  id: 'getting-channel-data',\n  children: []\n}, {\n  value: 'Channel ID',\n  id: 'channel-id',\n  children: []\n}, {\n  value: 'Different Initializers',\n  id: 'different-initializers',\n  children: []\n}, {\n  value: 'Importance of <code>synchronize</code>',\n  id: 'importance-of-synchronize',\n  children: []\n}, {\n  value: 'Observing Changes to Channel',\n  id: 'observing-changes-to-channel',\n  children: [{\n    value: 'UIKit Delegates',\n    id: 'uikit-delegates',\n    children: []\n  }, {\n    value: 'Combine Publishers',\n    id: 'combine-publishers',\n    children: []\n  }, {\n    value: 'SwiftUI Wrappers',\n    id: 'swiftui-wrappers',\n    children: []\n  }]\n}, {\n  value: 'Getting and Paginating Messages',\n  id: 'getting-and-paginating-messages',\n  children: [{\n    value: 'UIKit Delegates',\n    id: 'uikit-delegates-1',\n    children: []\n  }, {\n    value: 'Combine Publishers',\n    id: 'combine-publishers-1',\n    children: []\n  }, {\n    value: 'SwiftUI',\n    id: 'swiftui',\n    children: []\n  }]\n}, {\n  value: 'Channel Members',\n  id: 'channel-members',\n  children: [{\n    value: 'Adding/Removing Members',\n    id: 'addingremoving-members',\n    children: []\n  }]\n}, {\n  value: 'Unread Count for the Channel',\n  id: 'unread-count-for-the-channel',\n  children: []\n}, {\n  value: 'Getting a Model Directly from ChannelController',\n  id: 'getting-a-model-directly-from-channelcontroller',\n  children: []\n}, {\n  value: 'Channel Actions',\n  id: 'channel-actions',\n  children: []\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2 {...{\n      \"id\": \"getting-channel-data\"\n    }}>{`Getting Channel Data`}</h2>\n    <p><img src={require(\"!url-loader?limit=10000&name=assets/images/[name]-[hash].[ext]&fallback=file-loader!/Users/dmigach/Desktop/stream-chat-swift/stream-chat-swift-docs/static/img/channel-header.png\").default} /></p>\n    <p>{`Here's how you can get data of a Channel you already know the Channel ID of:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`let channelController = chatClient\n    .channelController(for: ChannelId(type: .messaging, id: \"general\")\nchannelController.synchronize { error in\n    if let error = error {\n        // Handle error\n    } else {\n        let channel = channelController.channel\n        let messages = channelController.messages\n        // Use \\`channel\\` and \\`messages\\` as you please\n    }\n}\n`}</code></pre>\n    <p>{`To create a new Channel, we can use `}<inlineCode parentName=\"p\">{`ChannelController`}</inlineCode>{` in slightly different way:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`let channelController = chatClient\n    .channelController(createChannelWithId: ChannelId(type: .messaging, id: \"general\"))\n// Our channel is created on backend with the \\`synchronize\\` call\nchannelController.synchronize { error in\n    if let error = error {\n        // Handle error\n    } else {\n        let channel = channelController.channel\n        let messages = channelController.messages\n        // Use \\`channel\\` and \\`messages\\` as you please\n    }\n}\n`}</code></pre>\n    <p>{`Let's dive deep into these.`}</p>\n    <h2 {...{\n      \"id\": \"channel-id\"\n    }}>{`Channel ID`}</h2>\n    <p>{`In StreamChat, each Channel has a unique Channel ID, created from `}<inlineCode parentName=\"p\">{`type`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`id`}</inlineCode>{`. These will be represented in the format `}<inlineCode parentName=\"p\">{`type:id`}</inlineCode>{` in requests and backend.\nFor example,`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`let channelId = ChannelId(type: .messaging, id: \"general\")\n`}</code></pre>\n    <p>{`Encoded, this will be represented as `}<inlineCode parentName=\"p\">{`messaging:general`}</inlineCode>{`.\nFor more information about channel types, please refer to `}<a parentName=\"p\" {...{\n        \"href\": \"https://getstream.io/chat/docs/ios-swift/channel_features/?language=swift\"\n      }}>{`Channel Types Documentation`}</a></p>\n    <h2 {...{\n      \"id\": \"different-initializers\"\n    }}>{`Different Initializers`}</h2>\n    <p>{`There are multiple ways of creating a `}<inlineCode parentName=\"p\">{`ChannelController`}</inlineCode>{` instance from `}<inlineCode parentName=\"p\">{`ChatClient`}</inlineCode>{`. Each way represent a unique usecase, explained below.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Initializing`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Use Case`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Implications`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`chatClient.channelController(for cid:)`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`You already know the `}<inlineCode parentName=\"td\">{`ChannelId`}</inlineCode>{` and the Channel is already created on backend`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`You can directly call actions on this controller without having to call `}<inlineCode parentName=\"td\">{`synchronize`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`chatClient.channelController(createChannelWithId:)`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`You want to create a new Channel on backend`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`You should call `}<inlineCode parentName=\"td\">{`synchronize`}</inlineCode>{` on the controller before calling any actions or accessing any data.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`chatClient.channelController(createDirectMessageChannelWith:)`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`You want to create a direct message Channel between users.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Direct message Channel ID's are generated by backend. More information is explained below.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`chatClient.channelController(for query:)`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`You want to have a finer control over which data is initally fetched from backend.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Using this initializer, you can control various parameters, explained below.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <div {...{\n      \"className\": \"admonition admonition-important alert alert--info\"\n    }}><div parentName=\"div\" {...{\n        \"className\": \"admonition-heading\"\n      }}><h5 parentName=\"div\"><span parentName=\"h5\" {...{\n            \"className\": \"admonition-icon\"\n          }}><svg parentName=\"span\" {...{\n              \"xmlns\": \"http://www.w3.org/2000/svg\",\n              \"width\": \"14\",\n              \"height\": \"16\",\n              \"viewBox\": \"0 0 14 16\"\n            }}><path parentName=\"svg\" {...{\n                \"fillRule\": \"evenodd\",\n                \"d\": \"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z\"\n              }}></path></svg></span>{`important`}</h5></div><div parentName=\"div\" {...{\n        \"className\": \"admonition-content\"\n      }}><p parentName=\"div\">{`Using `}<inlineCode parentName=\"p\">{`channelController(create*:)`}</inlineCode>{` initializers behave the same as using the `}<inlineCode parentName=\"p\">{`cid`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`query`}</inlineCode>{` ones as long as `}<inlineCode parentName=\"p\">{`synchronize`}</inlineCode>{` is called on them.\nWhen the backend already has information about the Channel, it's not wiped out, and simply returned.`}</p></div></div>\n    <h2 {...{\n      \"id\": \"importance-of-synchronize\"\n    }}>{`Importance of `}<inlineCode parentName=\"h2\">{`synchronize`}</inlineCode></h2>\n    <p>{`Controllers are lightweight objects and they only fetch data when needed. When the `}<inlineCode parentName=\"p\">{`ChannelController`}</inlineCode>{` is created, it doesn't fetch local or remote data until it needs it.\n`}<inlineCode parentName=\"p\">{`synchronize`}</inlineCode>{` makes sure StreamChat's local database and backend is in sync. It queries the backend for the latest state of the Channel and updates the database. In addition, `}<inlineCode parentName=\"p\">{`synchronize`}</inlineCode>{` call starts actually obversing the Channel for changes, so you will start getting live updates of the changes to the Channel, including it's messages.`}</p>\n    <p>{`If you only need the local data, you can just access it after creation, like so:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`let channelController = chatClient.channelController(for: ChannelId(type: .messaging, id: \"general\"))\nlet channel = channelController.channel\nlet messages = channelController.messages\n`}</code></pre>\n    <p>{`In addition, you don't need to call `}<inlineCode parentName=\"p\">{`synchronize`}</inlineCode>{` to be able to call actions on the channel, such as `}<inlineCode parentName=\"p\">{`freezeChannel`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`let channelController = chatClient.channelController(for: ChannelId(type: .messaging, id: \"general\"))\nchannelController.freezeChannel()\n`}</code></pre>\n    <p>{`But as stated in the table above, if the Channel is not created in backend yet, you'll need to call `}<inlineCode parentName=\"p\">{`synchronize`}</inlineCode>{` first, else the action calls will fail.`}</p>\n    <p>{`Additionally, as with all StreamChat Controllers, `}<inlineCode parentName=\"p\">{`ChannelController`}</inlineCode>{` has `}<inlineCode parentName=\"p\">{`state`}</inlineCode>{` and a delegate function to observe it's `}<inlineCode parentName=\"p\">{`state`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func controller(_ controller: DataController, didChangeState state: DataController.State) \n`}</code></pre>\n    <p>{`You can use this delegate function to show any error states you might see. For more information, see `}<a parentName=\"p\" {...{\n        \"href\": \"404\"\n      }}>{`DataController Overview`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"observing-changes-to-channel\"\n    }}>{`Observing Changes to Channel`}</h2>\n    <p>{`After you call `}<inlineCode parentName=\"p\">{`synchronize`}</inlineCode>{`, the controller is subscribed to changes to the Channel. You can use UIKit delegates, Combine publishers or SwiftUI Wrappers to observe the changes.`}</p>\n    <h3 {...{\n      \"id\": \"uikit-delegates\"\n    }}>{`UIKit Delegates`}</h3>\n    <p>{`On each change, you'll receive the delegate call:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func channelController(\n        _ channelController: ChatChannelController,\n        didUpdateChannel channel: EntityChange<ChatChannel>\n    ) {\n        // Handle the change\n        // You can access \\`channel\\` directly by:\n        print(channelController.channel.name)\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"combine-publishers\"\n    }}>{`Combine Publishers`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`channelController\n    .channelChangePublisher\n    .receive(on: RunLoop.main)\n    .sink { change in\n        // Handle change\n        // or you can access directly\n        print(channelController.channel.name)\n}.store(in: &cancellables)\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"swiftui-wrappers\"\n    }}>{`SwiftUI Wrappers`}</h3>\n    <p><inlineCode parentName=\"p\">{`ChannelController`}</inlineCode>{` has `}<inlineCode parentName=\"p\">{`observableObject`}</inlineCode>{` property availabel that can be used in SwiftUI easily:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`struct ChannelListView: View {\n    @ObservedObject var channelController: ChatChannelController.ObservableObject\n\n    init(channelController: ChatChannelController) {\n        self.channelController = channelController.observableObject\n    }\n\n    var body: some View {\n        Text(channelController.channel.cid)\n        .navigationBarTitle(channelController.channel.name)\n        .onAppear { \n            // call \\`synchronize()\\` to update the locally cached data.\n            channelController.controller.synchronize() \n        }\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"getting-and-paginating-messages\"\n    }}>{`Getting and Paginating Messages`}</h2>\n    <p>{`You can get and paginate messages of a Channel like so:`}</p>\n    <h3 {...{\n      \"id\": \"uikit-delegates-1\"\n    }}>{`UIKit Delegates`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`class MyViewController: UIViewController, ChatChannelControllerDelegate {\n    var channelController: ChatChannelController!\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        channelController.delegate = self\n        channelController.synchronize()\n    }\n\n    // This function is called when we need to load previous page of messages\n    // For example, on \\`scrollViewDidBounce\\`\n    func scrolledToEndOfList() {\n        channelController.loadPreviousMessages()\n    }\n    \n    // ChatChannelControllerDelegate Methods\n    \n    func channelController(_ channelController: ChatChannelController, didUpdateMessages changes: [ListChange<ChatMessage>]) {\n        // Handle changes to messages\n        // eg. pipe the changes to collectionView (shown below)\n    }\n}\n`}</code></pre>\n    <p>{`There's also `}<inlineCode parentName=\"p\">{`loadNextMessages(after: MessageId)`}</inlineCode>{` function that you can call to get messages newer than the provided message id. Most often, new messages are automatically updated by the controller via WebSocket events, so you don't need to call this.`}</p>\n    <p>{`You can also access the messages directly:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`let messages = channelController.messages\n`}</code></pre>\n    <p>{`but in most cases, it's better to use delegate callbacks, since they provide live updates. You can pipe the delegate callback to a collectionView/tableView like so:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func channelController(_ channelController: ChatChannelController, didUpdateMessages changes: [ListChange<ChatMessage>]) {\n        collectionView.erformBatchUpdates {\n            for change in changes {\n                switch change {\n                case let .insert(_, index):\n                    collectionView.insertItems(at: [index])\n                case let .move(_, fromIndex, toIndex):\n                    collectionView.moveItem(at: fromIndex, to: toIndex)\n                case let .remove(_, index):\n                    collectionView.deleteItems(at: [index])\n                case let .update(_, index):\n                    collectionView.reloadItems(at: [index])\n                }\n            }\n        }\n    }\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"combine-publishers-1\"\n    }}>{`Combine Publishers`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`channelController.messagesChangesPublisher.receive(on: RunLoop.main).sink { change in\n    // Handle change\n    // or access messages directly\n    print(channelController.messages.last?.text)\n}.store(in: &cancellables)\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"swiftui\"\n    }}>{`SwiftUI`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`struct ChannelListView: View {\n    @ObservedObject var channelController: ChatChannelController.ObservableObject\n\n    init(channelController: ChatChannelController) {\n        self.channelController = channelController.observableObject\n    }\n\n    var body: some View {\n        LazyVStack(alignment: .leading) {\n            ForEach(channelController.messages, id: \\\\.self) { message in\n                Text(mesaage.text)\n                .onAppear {\n                    if self.channelController.messages.first == message {\n                       self.channelController.controller.loadPreviousMessages()\n                    }\n                }\n            }\n        }\n        .navigationBarTitle(channelController.channel.name)\n        .onAppear { \n            // call \\`synchronize()\\` to update the locally cached data.\n            channelController.controller.synchronize() \n        }\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"channel-members\"\n    }}>{`Channel Members`}</h2>\n    <p><inlineCode parentName=\"p\">{`ChannelController`}</inlineCode>{` allows you to access Channel's locally cached members, as shown:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`channelController.channel?.cachedMembers\n`}</code></pre>\n    <p>{`Since a Channel can have many members, the local database might not have all the members cached. For this reason, we have `}<inlineCode parentName=\"p\">{`MemberListController`}</inlineCode>{`, documented `}<a parentName=\"p\" {...{\n        \"href\": \"working-with-members\"\n      }}>{`here`}</a>{`.`}</p>\n    <p><inlineCode parentName=\"p\">{`ChannelController`}</inlineCode>{` receives `}<inlineCode parentName=\"p\">{`MemberAdded`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`MemberUpdated`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`MemberRemoved`}</inlineCode>{` events, and reports the updated Member object via its delegate method:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func channelController(_ channelController: ChatChannelController, didReceiveMemberEvent: MemberEvent) {\n    // handle the event\n}\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`channel.cachedMembers`}</inlineCode>{` are also updated with the new data.`}</p>\n    <h3 {...{\n      \"id\": \"addingremoving-members\"\n    }}>{`Adding/Removing Members`}</h3>\n    <p><inlineCode parentName=\"p\">{`ChannelController`}</inlineCode>{` has actions for adding and removing members to the channel.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`channelController.addMembers(userIds: [\"anakin-skywalker\", \"luke-skywalker\", \"leia-organa\"])\nchannelController.removeMembers(userIds: [\"anakin-skywalker\"])\n`}</code></pre>\n    <p>{`As a result of these calls, you will receive corresponding Member events and `}<inlineCode parentName=\"p\">{`channel.cachedMembers`}</inlineCode>{` will be updated accordingly.`}</p>\n    <h2 {...{\n      \"id\": \"unread-count-for-the-channel\"\n    }}>{`Unread Count for the Channel`}</h2>\n    <p>{`You can use `}<inlineCode parentName=\"p\">{`didUpdateChannel`}</inlineCode>{` delegate callback to access the latest unread count for a channel. Like so:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func channelController(\n        _ channelController: ChatChannelController,\n        didUpdateChannel channel: EntityChange<ChatChannel>\n    ) {\n        let unreadMessages = channelController.channel?.unreadCount.messages\n        let unreadMentions = channelController.channel?.unreadCount.mentionedMessages\n}\n`}</code></pre>\n    <p>{`Usually, you use `}<inlineCode parentName=\"p\">{`ChannelListController`}</inlineCode>{` to observe changes to unread counts, since it's displayed in the Channel List next to channel name.\nFor info about handling Channel List, see `}<a parentName=\"p\" {...{\n        \"href\": \"working-with-channel-list\"\n      }}>{`here`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"getting-a-model-directly-from-channelcontroller\"\n    }}>{`Getting a Model Directly from ChannelController`}</h2>\n    <p>{`Sometimes, as advanced usage, you may want to access arbitrary models from local database. You may want to do so as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`let dataStore = channelController.dataStore\n// Get another channel. Ideally, you'd use another ChannelController\nlet otherChannel = dataStore.channel(cid: ChannelId(type: .messaging, id: \"work\"))\n\n// Get some user. Ideally, you'd use UserController\nlet someUser = dataStore.user(id: \"han-solo\")\n\n// Get current user. Ideally, you'd use CurrentUserController\nlet currentUser = dataStore.currentUser()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"channel-actions\"\n    }}>{`Channel Actions`}</h2>\n    <p>{`For all actions available on a Channel, such as muting, hiding, deleting, and truncating, please refer to `}<a parentName=\"p\" {...{\n        \"href\": \"404\"\n      }}>{`ChannelController documentation`}</a></p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "]}]}